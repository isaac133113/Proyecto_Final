Index: src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import com.empresa.empleados.Empleados;\r\nimport com.empresa.reservas.Reservas;\r\n\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.SQLException;\r\nimport java.util.Scanner;\r\n\r\npublic class Main {\r\n    static final String DB_URL = \"jdbc:mysql://localhost:3306/reservas_salas?useSSL=false&serverTimezone=UTC\";\r\n    static final String USER = \"root\";\r\n    static final String PASS = \"root\";\r\n\r\n    public static void main(String[] args) {\r\n        try (Connection conn = DriverManager.getConnection(DB_URL, USER, PASS);\r\n             Scanner scanner = new Scanner(System.in)) {\r\n\r\n            System.out.println(\"✅ Conectado a la base de datos\");\r\n            boolean salir = false;\r\n\r\n            while (!salir) {\r\n                System.out.println(\"\\n--- Menú principal ---\");\r\n                System.out.println(\"1. Gestionar salas\");\r\n                System.out.println(\"2. Gestionar empleados\");\r\n                System.out.println(\"3. Salir\");\r\n                System.out.print(\"Selecciona una opción: \");\r\n\r\n                int opcion = -1;\r\n                if (scanner.hasNextInt()) {\r\n                    opcion = scanner.nextInt();\r\n                    scanner.nextLine(); // limpiar buffer\r\n                } else {\r\n                    System.err.println(\"❌ Entrada inválida. Por favor, introduce un número.\");\r\n                    scanner.nextLine(); // limpiar entrada errónea\r\n                    continue;\r\n                }\r\n\r\n                switch (opcion) {\r\n                    case 1 -> Reservas.mostrarMenu(conn);\r\n                    case 2 -> Empleados.mostrarMenu(conn);\r\n           //        case 3 ->\r\n                    case 4 -> {\r\n                        salir = true;\r\n                        System.out.println(\"Saliendo...\");\r\n                    }\r\n                    default -> System.err.println(\"Opción no válida.\");\r\n                }\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            System.err.println(\"❌ Error al conectar con la base de datos\");\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Main.java b/src/main/java/Main.java
--- a/src/main/java/Main.java	(revision e9cf7a2f62f894978b6d260b78504c812e902b24)
+++ b/src/main/java/Main.java	(date 1750689062651)
@@ -1,5 +1,6 @@
 import com.empresa.empleados.Empleados;
 import com.empresa.reservas.Reservas;
+import com.empresa.salas.Salas;
 
 import java.sql.Connection;
 import java.sql.DriverManager;
@@ -38,7 +39,7 @@
                 switch (opcion) {
                     case 1 -> Reservas.mostrarMenu(conn);
                     case 2 -> Empleados.mostrarMenu(conn);
-           //        case 3 ->
+                    case 3 -> Salas.mostrarMenu(conn);
                     case 4 -> {
                         salir = true;
                         System.out.println("Saliendo...");
Index: src/main/java/com/empresa/reservas/Reservas.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.empresa.reservas;\r\n\r\nimport java.sql.*;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Aplicación para gestionar CRUD de salas de reuniones.\r\n */\r\npublic class Reservas {\r\n\r\n    /**\r\n     * Muestra el menú principal para gestionar las salas.\r\n     * @param conn conexión a la base de datos\r\n     */\r\n    public static void mostrarMenu(Connection conn) {\r\n        try (Scanner scanner = new Scanner(System.in)) {\r\n            boolean salir = false;\r\n\r\n            while (!salir) {\r\n                System.out.println(\"\\n--- Menú de gestión de salas ---\");\r\n                System.out.println(\"1. Crear sala\");\r\n                System.out.println(\"2. Listar salas\");\r\n                System.out.println(\"3. Actualizar sala\");\r\n                System.out.println(\"4. Eliminar sala\");\r\n                System.out.println(\"5. Salir\");\r\n                System.out.print(\"Selecciona una opción: \");\r\n\r\n                int opcion = -1;\r\n                if (scanner.hasNextInt()) {\r\n                    opcion = scanner.nextInt();\r\n                    scanner.nextLine(); // limpiar buffer\r\n                } else {\r\n                    System.err.println(\"❌ Entrada inválida. Por favor, introduce un número.\");\r\n                    scanner.nextLine(); // limpiar entrada errónea\r\n                    continue;\r\n                }\r\n\r\n                switch (opcion) {\r\n                    case 1 -> crearSala(conn, scanner);\r\n                    case 2 -> leerSalas(conn);\r\n                    case 3 -> actualizarSala(conn, scanner);\r\n                    case 4 -> eliminarSala(conn, scanner);\r\n                    case 5 -> {\r\n                        salir = true;\r\n                        System.out.println(\"Saliendo...\");\r\n                    }\r\n                    default -> System.err.println(\"Opción no válida.\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Crea una nueva sala en la base de datos.\r\n     * @param conn conexión a la base de datos\r\n     * @param scanner para leer la entrada del usuario\r\n     */\r\n    private static void crearSala(Connection conn, Scanner scanner) {\r\n        try {\r\n            System.out.print(\"Nombre de la sala: \");\r\n            String nombre = scanner.nextLine();\r\n            System.out.print(\"Capacidad: \");\r\n            int capacidad = Integer.parseInt(scanner.nextLine());\r\n            System.out.print(\"Recursos: \");\r\n            String recursos = scanner.nextLine();\r\n\r\n            String sql = \"INSERT INTO salas (nombre, capacidad, recursos) VALUES (?, ?, ?)\";\r\n            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n                pstmt.setString(1, nombre);\r\n                pstmt.setInt(2, capacidad);\r\n                pstmt.setString(3, recursos);\r\n                pstmt.executeUpdate();\r\n                System.out.println(\"✅ Sala creada con éxito\");\r\n            }\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Error creando sala:\");\r\n            e.printStackTrace();\r\n        } catch (NumberFormatException e) {\r\n            System.err.println(\"❌ Capacidad inválida. Debe ser un número entero.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Lista todas las salas de la base de datos.\r\n     * @param conn conexión a la base de datos\r\n     */\r\n    private static void leerSalas(Connection conn) {\r\n        String sql = \"SELECT * FROM salas\";\r\n        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {\r\n            System.out.println(\"\\nListado de salas:\");\r\n            while (rs.next()) {\r\n                System.out.printf(\"ID: %d | Nombre: %s | Capacidad: %d | Recursos: %s%n\",\r\n                        rs.getInt(\"id\"),\r\n                        rs.getString(\"nombre\"),\r\n                        rs.getInt(\"capacidad\"),\r\n                        rs.getString(\"recursos\"));\r\n            }\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Error leyendo salas:\");\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Actualiza los datos de una sala existente.\r\n     * @param conn conexión a la base de datos\r\n     * @param scanner para leer la entrada del usuario\r\n     */\r\n    private static void actualizarSala(Connection conn, Scanner scanner) {\r\n        try {\r\n            System.out.print(\"ID de la sala a actualizar: \");\r\n            int id = Integer.parseInt(scanner.nextLine());\r\n            System.out.print(\"Nuevo nombre: \");\r\n            String nombre = scanner.nextLine();\r\n            System.out.print(\"Nueva capacidad: \");\r\n            int capacidad = Integer.parseInt(scanner.nextLine());\r\n            System.out.print(\"Nuevos recursos: \");\r\n            String recursos = scanner.nextLine();\r\n\r\n            String sql = \"UPDATE salas SET nombre = ?, capacidad = ?, recursos = ? WHERE id = ?\";\r\n            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n                pstmt.setString(1, nombre);\r\n                pstmt.setInt(2, capacidad);\r\n                pstmt.setString(3, recursos);\r\n                pstmt.setInt(4, id);\r\n\r\n                int filas = pstmt.executeUpdate();\r\n                if (filas > 0) {\r\n                    System.out.println(\"✅ Sala actualizada con éxito\");\r\n                } else {\r\n                    System.err.println(\"❌ No se encontró sala con ese ID\");\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Error actualizando sala:\");\r\n            e.printStackTrace();\r\n        } catch (NumberFormatException e) {\r\n            System.err.println(\"❌ Entrada inválida. Debes ingresar números para ID y capacidad.\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Elimina una sala de la base de datos.\r\n     * @param conn conexión a la base de datos\r\n     * @param scanner para leer la entrada del usuario\r\n     */\r\n    private static void eliminarSala(Connection conn, Scanner scanner) {\r\n        try {\r\n            System.out.print(\"ID de la sala a eliminar: \");\r\n            int id = Integer.parseInt(scanner.nextLine());\r\n\r\n            String sql = \"DELETE FROM salas WHERE id = ?\";\r\n            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {\r\n                pstmt.setInt(1, id);\r\n                int filas = pstmt.executeUpdate();\r\n                if (filas > 0) {\r\n                    System.out.println(\"✅ Sala eliminada con éxito\");\r\n                } else {\r\n                    System.err.println(\"❌ No se encontró sala con ese ID\");\r\n                }\r\n            }\r\n        } catch (SQLException e) {\r\n            System.err.println(\"Error eliminando sala:\");\r\n            e.printStackTrace();\r\n        } catch (NumberFormatException e) {\r\n            System.err.println(\"❌ ID inválido. Debe ser un número entero.\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/empresa/reservas/Reservas.java b/src/main/java/com/empresa/reservas/Reservas.java
--- a/src/main/java/com/empresa/reservas/Reservas.java	(revision e9cf7a2f62f894978b6d260b78504c812e902b24)
+++ b/src/main/java/com/empresa/reservas/Reservas.java	(date 1750689062653)
@@ -1,169 +1,0 @@
-package com.empresa.reservas;
-
-import java.sql.*;
-import java.util.Scanner;
-
-/**
- * Aplicación para gestionar CRUD de salas de reuniones.
- */
-public class Reservas {
-
-    /**
-     * Muestra el menú principal para gestionar las salas.
-     * @param conn conexión a la base de datos
-     */
-    public static void mostrarMenu(Connection conn) {
-        try (Scanner scanner = new Scanner(System.in)) {
-            boolean salir = false;
-
-            while (!salir) {
-                System.out.println("\n--- Menú de gestión de salas ---");
-                System.out.println("1. Crear sala");
-                System.out.println("2. Listar salas");
-                System.out.println("3. Actualizar sala");
-                System.out.println("4. Eliminar sala");
-                System.out.println("5. Salir");
-                System.out.print("Selecciona una opción: ");
-
-                int opcion = -1;
-                if (scanner.hasNextInt()) {
-                    opcion = scanner.nextInt();
-                    scanner.nextLine(); // limpiar buffer
-                } else {
-                    System.err.println("❌ Entrada inválida. Por favor, introduce un número.");
-                    scanner.nextLine(); // limpiar entrada errónea
-                    continue;
-                }
-
-                switch (opcion) {
-                    case 1 -> crearSala(conn, scanner);
-                    case 2 -> leerSalas(conn);
-                    case 3 -> actualizarSala(conn, scanner);
-                    case 4 -> eliminarSala(conn, scanner);
-                    case 5 -> {
-                        salir = true;
-                        System.out.println("Saliendo...");
-                    }
-                    default -> System.err.println("Opción no válida.");
-                }
-            }
-        }
-    }
-
-    /**
-     * Crea una nueva sala en la base de datos.
-     * @param conn conexión a la base de datos
-     * @param scanner para leer la entrada del usuario
-     */
-    private static void crearSala(Connection conn, Scanner scanner) {
-        try {
-            System.out.print("Nombre de la sala: ");
-            String nombre = scanner.nextLine();
-            System.out.print("Capacidad: ");
-            int capacidad = Integer.parseInt(scanner.nextLine());
-            System.out.print("Recursos: ");
-            String recursos = scanner.nextLine();
-
-            String sql = "INSERT INTO salas (nombre, capacidad, recursos) VALUES (?, ?, ?)";
-            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
-                pstmt.setString(1, nombre);
-                pstmt.setInt(2, capacidad);
-                pstmt.setString(3, recursos);
-                pstmt.executeUpdate();
-                System.out.println("✅ Sala creada con éxito");
-            }
-        } catch (SQLException e) {
-            System.err.println("Error creando sala:");
-            e.printStackTrace();
-        } catch (NumberFormatException e) {
-            System.err.println("❌ Capacidad inválida. Debe ser un número entero.");
-        }
-    }
-
-    /**
-     * Lista todas las salas de la base de datos.
-     * @param conn conexión a la base de datos
-     */
-    private static void leerSalas(Connection conn) {
-        String sql = "SELECT * FROM salas";
-        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
-            System.out.println("\nListado de salas:");
-            while (rs.next()) {
-                System.out.printf("ID: %d | Nombre: %s | Capacidad: %d | Recursos: %s%n",
-                        rs.getInt("id"),
-                        rs.getString("nombre"),
-                        rs.getInt("capacidad"),
-                        rs.getString("recursos"));
-            }
-        } catch (SQLException e) {
-            System.err.println("Error leyendo salas:");
-            e.printStackTrace();
-        }
-    }
-
-    /**
-     * Actualiza los datos de una sala existente.
-     * @param conn conexión a la base de datos
-     * @param scanner para leer la entrada del usuario
-     */
-    private static void actualizarSala(Connection conn, Scanner scanner) {
-        try {
-            System.out.print("ID de la sala a actualizar: ");
-            int id = Integer.parseInt(scanner.nextLine());
-            System.out.print("Nuevo nombre: ");
-            String nombre = scanner.nextLine();
-            System.out.print("Nueva capacidad: ");
-            int capacidad = Integer.parseInt(scanner.nextLine());
-            System.out.print("Nuevos recursos: ");
-            String recursos = scanner.nextLine();
-
-            String sql = "UPDATE salas SET nombre = ?, capacidad = ?, recursos = ? WHERE id = ?";
-            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
-                pstmt.setString(1, nombre);
-                pstmt.setInt(2, capacidad);
-                pstmt.setString(3, recursos);
-                pstmt.setInt(4, id);
-
-                int filas = pstmt.executeUpdate();
-                if (filas > 0) {
-                    System.out.println("✅ Sala actualizada con éxito");
-                } else {
-                    System.err.println("❌ No se encontró sala con ese ID");
-                }
-            }
-        } catch (SQLException e) {
-            System.err.println("Error actualizando sala:");
-            e.printStackTrace();
-        } catch (NumberFormatException e) {
-            System.err.println("❌ Entrada inválida. Debes ingresar números para ID y capacidad.");
-        }
-    }
-
-    /**
-     * Elimina una sala de la base de datos.
-     * @param conn conexión a la base de datos
-     * @param scanner para leer la entrada del usuario
-     */
-    private static void eliminarSala(Connection conn, Scanner scanner) {
-        try {
-            System.out.print("ID de la sala a eliminar: ");
-            int id = Integer.parseInt(scanner.nextLine());
-
-            String sql = "DELETE FROM salas WHERE id = ?";
-            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
-                pstmt.setInt(1, id);
-                int filas = pstmt.executeUpdate();
-                if (filas > 0) {
-                    System.out.println("✅ Sala eliminada con éxito");
-                } else {
-                    System.err.println("❌ No se encontró sala con ese ID");
-                }
-            }
-        } catch (SQLException e) {
-            System.err.println("Error eliminando sala:");
-            e.printStackTrace();
-        } catch (NumberFormatException e) {
-            System.err.println("❌ ID inválido. Debe ser un número entero.");
-        }
-    }
-}
