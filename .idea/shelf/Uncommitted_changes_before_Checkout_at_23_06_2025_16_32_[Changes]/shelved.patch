Index: src/main/java/com/empresa/reservas/Reservas.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.empresa.reservas;\r\n\r\nimport java.sql.*;\r\nimport java.util.Scanner;\r\n\r\n/**\r\n * Clase que gestiona las operaciones relacionadas con las reservas de salas.\r\n * Permite crear reservas, consultar las existentes y controlar conflictos de horario.\r\n */\r\npublic class Reservas {\r\n\r\n    /**\r\n     * Muestra el menú de gestión de reservas e invoca las operaciones correspondientes.\r\n     * @param conn conexión activa a la base de datos\r\n     */\r\n    public static void mostrarMenu(Connection conn) {\r\n        try (Scanner scanner = new Scanner(System.in)) {\r\n            boolean salir = false;\r\n\r\n            while (!salir) {\r\n                // Menú principal\r\n                System.out.println(\"\\n--- Menú de gestión de reservas ---\");\r\n                System.out.println(\"1. Crear reserva\");\r\n                System.out.println(\"2. Listar reservas\");\r\n                System.out.println(\"3. Salir\");\r\n                System.out.print(\"Selecciona una opción: \");\r\n\r\n                int opcion = -1;\r\n                if (scanner.hasNextInt()) {\r\n                    opcion = scanner.nextInt();\r\n                    scanner.nextLine(); // Limpiar buffer tras lectura de int\r\n                } else {\r\n                    System.err.println(\"❌ Entrada inválida.\");\r\n                    scanner.nextLine(); // Limpiar entrada errónea\r\n                    continue;\r\n                }\r\n\r\n                // Llamada a la opción seleccionada\r\n                switch (opcion) {\r\n                    case 1 -> crearReserva(conn, scanner);\r\n                    case 2 -> listarReservas(conn);\r\n                    case 3 -> salir = true;\r\n                    default -> System.err.println(\"❌ Opción no válida.\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Permite crear una nueva reserva si no hay conflicto horario.\r\n     * @param conn conexión a la base de datos\r\n     * @param scanner objeto para capturar entradas del usuario\r\n     */\r\n    private static void crearReserva(Connection conn, Scanner scanner) {\r\n        try {\r\n            // Solicitar datos al usuario\r\n            System.out.print(\"ID de la sala: \");\r\n            int salaId = Integer.parseInt(scanner.nextLine());\r\n\r\n            System.out.print(\"ID del empleado: \");\r\n            int empleadoId = Integer.parseInt(scanner.nextLine());\r\n\r\n            System.out.print(\"Fecha (YYYY-MM-DD): \");\r\n            String fecha = scanner.nextLine();\r\n\r\n            System.out.print(\"Hora de inicio (HH:MM): \");\r\n            String horaInicio = scanner.nextLine() + \":00\";\r\n\r\n            System.out.print(\"Hora de fin (HH:MM): \");\r\n            String horaFin = scanner.nextLine() + \":00\";\r\n\r\n            // Verificación de conflicto de horarios\r\n            String checkSql = \"SELECT COUNT(*) FROM reservas WHERE sala_id = ? AND fecha = ? AND (hora_inicio < ? AND hora_fin > ?)\";\r\n\r\n            try (PreparedStatement checkStmt = conn.prepareStatement(checkSql)) {\r\n                checkStmt.setInt(1, salaId);\r\n                checkStmt.setDate(2, Date.valueOf(fecha));\r\n                checkStmt.setTime(3, Time.valueOf(horaFin));\r\n                checkStmt.setTime(4, Time.valueOf(horaInicio));\r\n\r\n                ResultSet rs = checkStmt.executeQuery();\r\n                rs.next();\r\n                if (rs.getInt(1) > 0) {\r\n                    System.err.println(\"❌ Conflicto: Ya existe una reserva para esa sala y horario.\");\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // Insertar reserva si no hay conflicto\r\n            String insertSql = \"INSERT INTO reservas (sala_id, empleado_id, fecha, hora_inicio, hora_fin) VALUES (?, ?, ?, ?, ?)\";\r\n            try (PreparedStatement pstmt = conn.prepareStatement(insertSql)) {\r\n                pstmt.setInt(1, salaId);\r\n                pstmt.setInt(2, empleadoId);\r\n                pstmt.setDate(3, Date.valueOf(fecha));\r\n                pstmt.setTime(4, Time.valueOf(horaInicio));\r\n                pstmt.setTime(5, Time.valueOf(horaFin));\r\n                pstmt.executeUpdate();\r\n                System.out.println(\"✅ Reserva creada con éxito.\");\r\n            }\r\n\r\n        } catch (NumberFormatException e) {\r\n            // Captura errores al convertir texto a número\r\n            System.err.println(\"❌ Error: ID o formato de hora inválido.\");\r\n        } catch (IllegalArgumentException e) {\r\n            // Captura errores de formato de fecha u hora\r\n            System.err.println(\"❌ Formato de fecha u hora incorrecto.\");\r\n        } catch (SQLException e) {\r\n            // Captura errores SQL\r\n            System.err.println(\"❌ Error al insertar reserva:\");\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Lista todas las reservas realizadas, mostrando los nombres de la sala y el empleado.\r\n     * @param conn conexión activa a la base de datos\r\n     */\r\n    private static void listarReservas(Connection conn) {\r\n        String sql = \"\"\"\r\n            SELECT r.id, s.nombre AS sala, e.nombre AS empleado, r.fecha, r.hora_inicio, r.hora_fin\r\n            FROM reservas r\r\n            JOIN salas s ON r.sala_id = s.id\r\n            JOIN empleados e ON r.empleado_id = e.id\r\n            ORDER BY r.fecha, r.hora_inicio\r\n        \"\"\";\r\n\r\n        try (Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {\r\n            System.out.println(\"\\n\uD83D\uDCCB Reservas registradas:\");\r\n            while (rs.next()) {\r\n                System.out.printf(\"ID: %d | Sala: %s | Empleado: %s | Fecha: %s | %s - %s%n\",\r\n                        rs.getInt(\"id\"),\r\n                        rs.getString(\"sala\"),\r\n                        rs.getString(\"empleado\"),\r\n                        rs.getDate(\"fecha\"),\r\n                        rs.getTime(\"hora_inicio\"),\r\n                        rs.getTime(\"hora_fin\"));\r\n            }\r\n        } catch (SQLException e) {\r\n            System.err.println(\"❌ Error al leer las reservas:\");\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/empresa/reservas/Reservas.java b/src/main/java/com/empresa/reservas/Reservas.java
--- a/src/main/java/com/empresa/reservas/Reservas.java	(revision 80ff1982ea38cbbdc615835da9df4df8135e99b9)
+++ b/src/main/java/com/empresa/reservas/Reservas.java	(date 1750689171955)
@@ -70,7 +70,11 @@
             String horaFin = scanner.nextLine() + ":00";
 
             // Verificación de conflicto de horarios
-            String checkSql = "SELECT COUNT(*) FROM reservas WHERE sala_id = ? AND fecha = ? AND (hora_inicio < ? AND hora_fin > ?)";
+            String checkSql = """
+                SELECT COUNT(*) FROM reservas 
+                WHERE sala_id = ? AND fecha = ? 
+                AND (hora_inicio < ? AND hora_fin > ?)
+            """;
 
             try (PreparedStatement checkStmt = conn.prepareStatement(checkSql)) {
                 checkStmt.setInt(1, salaId);
